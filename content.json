{"pages":[],"posts":[{"title":"Introduction","text":"About MeWOOOOOOOOt up!!!!! Welcome to my little website. I called it CyberCube, This is the place belongs to me and filled with cyberpunk elements. Feel free to walk around. EducationUniversity of WashingtonBachelor of Science in Computer Science and Systems – (GPA: 3.46/4.0) Awards/Honors: Annual Dean’s List 2020-2021 Resume PDF Version View & Download Research Project [Detail post]DATABASE RESOURCE Administrator Directed and supervised a 2-man team to implement a desktop resource administrator system, from early designing to post-launch optimization.Successfully implemented a functional software and a sample SQLServer database with 1M random records with C# or .net Framework. Proposed Agile methodology for better flexibility and superior project predictability.Redesigned database schema in SQLserver, Effectively saw up to 13% reduction in reading queries time. Managed maintainable codebase by enforcing alignment with proper use of coding conventions.Compressed and optimized Time Elapsed Unit, facilitated up to 30% reduction in task processing time. ProjectsCustomerTrackerWebApp (WIP) Developed a light-weighted web application with UI that tracks customer information. Delivered innovative features such as customer listing and performing CRUD on MySQL database through Hibernate API. Implemented service facade design pattern and added a service layer to integrate data from multiple sources. Utilized Spring Framework, JSP,Maven, Java, Tomcat, etc. Pep/8 Assembly Language Simulator [Detail post] Leveraged proficiency with Java to design and implement Pep/8 assembly language simulator with MVC architecture. Assumed responsibility as a backend developer and actively contributed towards integrated instruction Execution Unit into the core system. Utilized JUnit to design an Instruction model and implement extensive tests for each instruction class. Provided utility tools for positional number conversion and solved bit masturbation overflow issues.","link":"/CyberCube/2020/02/02/main/"},{"title":"Database Resource Management System","text":"IntroductionOur main purposes of developing this database resource management application are to provide an easy to use system that monitors and controls resource usage, as well as provides flexible query access and user friendly interface. Architecture Overview Front End Design We have designed three window forms for our project. A user login window would be displayed at first upon opening the application. Users are able to enter their credentials to login into the system and have access to the databases. Another window which is called admin monitor would show up as well as starting the application. This form is designed for administrators to view all users’ information and monitor signed in users’ activities. It also grants administrators the ability to add additional access time for the users. After users have successfully signed in, the main application window would be provided to the users. Users are able to execute SQL queries on the main database and user database if they have previous queries results stored. There is a Status Log which notifies users the current status of the application. The History Console shows information of all the queries executed in the past and also updates when users successfully execute queries on the main database. At the bottom of the window, there is a SQL Result component for showing the data result after users execute queries Database DesignWe created two sample databases as we developed the system. The main database is designed for users to execute read-only SQL queries. The other database stores all of the information related to the users. It contains users’ credentials for authentication of login; a history table for each user which stores the dates, time, duration and query result table names of all the previous SQL queries; and tables for each successful query results on the main database Development ToolsDuring the development of our system, we have used C# for the frontend and UI design and connect to the databases. For the backend, we used SQL Server Management Studio to create databases. We used Github to store and update our codebase. Teams, and Discord are the tools we used for communication.","link":"/CyberCube/2021/04/24/Projects/DRMS/"},{"title":"Pep-8 Simulator","text":"IntroductionPep/8 is a virtual computer designed by Stanley Warford that has 39 machine-language instructions.We implemented 25/39 instructions in Java.This project adopts the Model-View-Controller (MVC) design pattern and agile methology. collaborator: Caleb Chang, Angela Seidel, Kiet Truong what is Virtual ComputerA hypotheticalmachine designed to contain the important features of a real computer that we want to illustrate Team Schdule(Agile) Architecture Overview Functional Requirements The simulator shall be able to interpret machine language instructions (object code) andassembly language instructions (source code). The simulator shall implement the seven machine language instruction of stop execution,load operand into A register, Store the contents of the A register in the operand, add theoperand to the A register, Subtract the operand from the A register, character input to theoperand, character output from the operand that was required in PRJ#01. The simulator shall implement no less than 30 of the 39 instructions. The simulator shall implement 4 of 6 addressing modes. The simulator GUI shall display the internal state of the machine (CPU area in originalPep/8 Program) and shall display the state of the memory. The project classes shall be organized using the Model-View-Controller design pattern. The Controller class shall be the class that connects the interactions between all Modelrelated classes and the Visual-related classes. The classes of the program shall mimic the von Neuman computer architecture: The Input Device will be represented by the Input JTextArea stored in the GUI. The Control Unit will be represented by the Controller class. The Arithmetic/Logic Unit will be represented by the Instruction Types package whosecomponents will be controlled by the Controller class. The Output Device will be represented by the JTextArea stored in the GUI. The Number Classes requirement shall be implemented by having the Converter Classwhich will manage the translation of decimal, hex, and binary values throughout theController class’s manipulation of model and view objects. The Calculator Classes requirement shall be implemented through the presence of theInstruction Types package which will help with basic operations like addition andsubtraction of valuesFront End Design","link":"/CyberCube/2020/10/15/Projects/Pep-8Simulator/"}],"tags":[{"name":"Java","slug":"Java","link":"/CyberCube/tags/Java/"},{"name":"About Me","slug":"About-Me","link":"/CyberCube/tags/About-Me/"},{"name":"C#","slug":"C","link":"/CyberCube/tags/C/"},{"name":"Project","slug":"Project","link":"/CyberCube/tags/Project/"}],"categories":[{"name":"Projects","slug":"Projects","link":"/CyberCube/categories/Projects/"}]}